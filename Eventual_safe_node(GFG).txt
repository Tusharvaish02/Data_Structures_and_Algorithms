class Solution {
  private:
    bool dfscheck(int node, vector<int>adj[], int vis[], int pathvis[], int check[]){
        vis[node]=1;
        pathvis[node]=1;
        check[node]=0;
        // traversing through theadjescent nodes
        for( auto it: adj[node]){
            //when the node is not previosly visisted
            if(!vis[it]){
                if(dfscheck(it, adj, vis, pathvis,check)== true){
                    check[node]=0;
                    return true;
                } 
            }
            // if the node has been previously visited on the same path
            else if(pathvis[it]){
                check[node]=0;
                return true;
            }
        }
        check[node]=1;
        pathvis[node]= 0;
        return false;
    }
  public:
    vector<int> eventualSafeNodes(int V, vector<int> adj[]) {
        // code here
        int vis[V]={0};
        int pathvis[V]={0};
        int check[V]={0};
        vector<int>vec;
        for(int i=0;i<V;i++){
            if(!vis[i]){
                dfscheck(i, adj,vis,pathvis, check);
            }
        }
        for(int i=0;i<V;i++){
            if(check[i])vec.push_back(i);
        }
        return vec;
    }
};